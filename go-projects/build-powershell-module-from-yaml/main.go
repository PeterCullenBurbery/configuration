package main

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/google/uuid"
	"gopkg.in/yaml.v3"
)

const moduleName = "MyModule"
const moduleDescription = "PowerShell utilities for configuring Windows systems, managing environments, customizing time and date settings, and automating administrative tasks."

// Recursively extract all PowerShell functions
func extractFunctions(node *yaml.Node, functions *[]string) {
	if node.Kind == yaml.MappingNode {
		for i := 0; i < len(node.Content); i += 2 {
			valNode := node.Content[i+1]
			if valNode.Kind == yaml.ScalarNode && strings.HasPrefix(strings.TrimSpace(valNode.Value), "function") {
				*functions = append(*functions, strings.TrimSpace(valNode.Value))
			} else {
				extractFunctions(valNode, functions)
			}
		}
	} else if node.Kind == yaml.SequenceNode {
		for _, item := range node.Content {
			extractFunctions(item, functions)
		}
	}
}

// Backup to a fixed .bak file (overwrite if it already exists), then write the new file with BOM
func overwriteWithSingleBackup(path string, content string) error {
	if _, err := os.Stat(path); err == nil {
		backupPath := path + ".bak"
		_ = os.Remove(backupPath) // delete old backup if exists
		if err := os.Rename(path, backupPath); err != nil {
			return fmt.Errorf("‚ùå Failed to back up existing file: %w", err)
		}
		fmt.Printf("üîÅ Existing file backed up: %s ‚Üí %s\n", path, backupPath)
	}

	// Prepend UTF-8 BOM
	utf8Bom := []byte{0xEF, 0xBB, 0xBF}
	data := append(utf8Bom, []byte(content)...)
	return os.WriteFile(path, data, 0644)
}

// Write collected functions into a .psm1 file
func writePsm1(functions []string, path string) error {
	content := strings.Join(functions, "\n\n")
	return overwriteWithSingleBackup(path, content)
}

// Generate PowerShell module manifest (.psd1)
func writePsd1(path string, moduleName string, description string, guid string) error {
	content := fmt.Sprintf(`# 
# Module manifest for module '%s'
#
# Generated by: Peter Burbery
#
# Generated on: %s
#

@{

# Script module or binary module file associated with this manifest.
RootModule = '%s.psm1'
# This will be updated to something like RootModule = ...

# Version number of this module.
ModuleVersion = '1.0.0'

# Supported PSEditions
# CompatiblePSEditions = @()

# ID used to uniquely identify this module
GUID = '%s'

#This will be updated to something like ....

# Author of this module
Author = 'Peter Cullen Burbery'
# added middle name

# Company or vendor of this module
CompanyName = 'Unknown'

# Copyright statement for this module
Copyright = '(c) Peter Burbery. Some rights reserved.'
# Some rights reserved.

# Description of the functionality provided by this module
Description = '%s'
#This will be updated.

# Minimum version of the PowerShell engine required by this module
# PowerShellVersion = ''

# Name of the PowerShell host required by this module
# PowerShellHostName = ''

# Minimum version of the PowerShell host required by this module
# PowerShellHostVersion = ''

# Minimum version of Microsoft .NET Framework required by this module. This prerequisite is valid for the PowerShell Desktop edition only.
# DotNetFrameworkVersion = ''

# Minimum version of the common language runtime (CLR) required by this module. This prerequisite is valid for the PowerShell Desktop edition only.
# ClrVersion = ''

# Processor architecture (None, X86, Amd64) required by this module
# ProcessorArchitecture = ''

# Modules that must be imported into the global environment prior to importing this module
# RequiredModules = @()

# Assemblies that must be loaded prior to importing this module
# RequiredAssemblies = @()

# Script files (.ps1) that are run in the caller's environment prior to importing this module.
# ScriptsToProcess = @()

# Type files (.ps1xml) to be loaded when importing this module
# TypesToProcess = @()

# Format files (.ps1xml) to be loaded when importing this module
# FormatsToProcess = @()

# Modules to import as nested modules of the module specified in RootModule/ModuleToProcess
# NestedModules = @()

# Functions to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no functions to export.
FunctionsToExport = '*'

# Cmdlets to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no cmdlets to export.
CmdletsToExport = '*'

# Variables to export from this module
VariablesToExport = '*'

# Aliases to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no aliases to export.
AliasesToExport = '*'

# DSC resources to export from this module
# DscResourcesToExport = @()

# List of all modules packaged with this module
# ModuleList = @()

# List of all files packaged with this module
# FileList = @()

# Private data to pass to the module specified in RootModule/ModuleToProcess. This may also contain a PSData hashtable with additional module metadata used by PowerShell.
PrivateData = @{

    PSData = @{

        # Tags applied to this module. These help with module discovery in online galleries.
        # Tags = @()

        # A URL to the license for this module.
        # LicenseUri = ''

        # A URL to the main website for this project.
        # ProjectUri = ''

        # A URL to an icon representing this module.
        # IconUri = ''

        # ReleaseNotes of this module
        # ReleaseNotes = ''

        # Prerelease string of this module
        # Prerelease = ''

        # Flag to indicate whether the module requires explicit user acceptance for install/update/save
        # RequireLicenseAcceptance = $false

        # External dependent modules of this module
        # ExternalModuleDependencies = @()

    } # End of PSData hashtable

} # End of PrivateData hashtable

# HelpInfo URI of this module
# HelpInfoURI = ''

# Default prefix for commands exported from this module. Override the default prefix using Import-Module -Prefix.
# DefaultCommandPrefix = ''

}
`, moduleName, time.Now().Format("1/2/2006"), moduleName, guid, description)

	return overwriteWithSingleBackup(path, content)
}

func main() {
	homeDir, _ := os.UserHomeDir()
	yamlPath := filepath.Join(homeDir, "Desktop", "GitHub-repositories", "configuration", "scripts.yaml")
	outputDir := filepath.Join(homeDir, "Desktop", "GitHub-repositories", "configuration", "output")
	psm1Path := filepath.Join(outputDir, moduleName+".psm1")
	psd1Path := filepath.Join(outputDir, moduleName+".psd1")

	if err := os.MkdirAll(outputDir, 0755); err != nil {
		panic(fmt.Errorf("‚ùå Failed to create output directory: %w", err))
	}

	yamlBytes, err := os.ReadFile(yamlPath)
	if err != nil {
		panic(fmt.Errorf("‚ùå Failed to read YAML: %w", err))
	}

	var root yaml.Node
	if err := yaml.Unmarshal(yamlBytes, &root); err != nil {
		panic(fmt.Errorf("‚ùå Failed to parse YAML: %w", err))
	}

	var functions []string
	if len(root.Content) > 0 {
		extractFunctions(root.Content[0], &functions)
	}

	if len(functions) == 0 {
		fmt.Println("‚ö†Ô∏è No PowerShell functions found in YAML.")
	} else {
		fmt.Printf("‚úÖ %d PowerShell functions extracted.\n", len(functions))
	}

	if err := writePsm1(functions, psm1Path); err != nil {
		panic(fmt.Errorf("‚ùå Failed to write .psm1: %w", err))
	}

	guid := uuid.New().String()

	if err := writePsd1(psd1Path, moduleName, moduleDescription, guid); err != nil {
		panic(fmt.Errorf("‚ùå Failed to write .psd1: %w", err))
	}

	fmt.Println("‚úÖ Module files written to:", outputDir)
}
